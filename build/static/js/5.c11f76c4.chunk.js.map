{"version":3,"sources":["components/topbar/Topbar.jsx","components/conversations/Conversations.js","components/messages/Messages.js","pages/messanger/Messanger.js"],"names":["Topbar","className","to","style","textDecoration","src","alt","getUserInfo","data","name","onClick","logout","Conversations","conversations","useState","user","setUser","friendID","members","find","m","_id","getUser","a","url","Host","Endpoints","userId","axios","post","result","useEffect","profile","Messages","message","own","text","Date","createdAt","toDateString","Messanger","setLoader","setConversations","currentChat","setCurrentChat","messages","setMessages","newMessages","setNewMessages","arrivalMessage","setArrivalMessage","error","setError","scrollRef","useRef","socket","current","io","SocketURL","on","sender","senderId","now","includes","prev","getConversations","get","console","log","getMessages","handleSubmit","e","preventDefault","conversationId","receiverId","undefined","member","emit","users","scrollIntoView","behavior","placeholder","map","c","i","length","ref","type","value","onChange","target"],"mappings":"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","file":"static/js/5.c11f76c4.chunk.js","sourcesContent":["import \"./topbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getUserInfo, logout } from \"../../helpers/comman_helper\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nexport default function Topbar() {\r\n    return (\r\n        <div className=\"topbarContainer\">\r\n            <Toaster />\r\n            <div className=\"topbarLeft\">\r\n                <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n                    <span className=\"logo\">Chat Now</span>\r\n                </Link>\r\n            </div>\r\n\r\n            <div className=\"topbarCenter\">\r\n\r\n            </div>\r\n            <div className=\"topbarRight\">\r\n                <div className=\"topbarLinks\">\r\n                    <span className=\"topbarLink\"></span>\r\n                    <span className=\"topbarLink\"></span>\r\n                </div>\r\n                <div className=\"topbarIcons\">\r\n                    <div className=\"topbarIconItem\">\r\n                        <span className=\"\"></span>\r\n                    </div>\r\n                    <div className=\"topbarIconItem\">\r\n                        <span className=\"\"></span>\r\n                    </div>\r\n                    <div className=\"topbarIconItem\">\r\n                        <span className=\"\"></span>\r\n                    </div>\r\n                </div>\r\n                <Link to={`/profile/rahulmore`}>\r\n                    <img\r\n                        src=\"https://lh3.googleusercontent.com/ogw/ADea4I708VJFYx3XKTF8u0dK-w-WsiENrtFo3h5q5flbpbM=s32-c-mo\"\r\n                        alt=\"Rahul More\"\r\n                        className=\"topbarImg\"\r\n                    />\r\n                </Link>\r\n                <span className=\"topbarIconItem\">{getUserInfo().data.name}</span>\r\n                <span className=\"topbarIconItem\" onClick={logout}>Logout</span>\r\n            </div>\r\n        </div >\r\n    );\r\n}","import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Endpoints, getUserInfo, Host } from '../../helpers/comman_helper';\r\nimport './conversations.css'\r\n\r\nexport default function Conversations({ conversations }) {\r\n\r\n    const [user, setUser] = useState(null);\r\n    var friendID = conversations.members.find((m) => m !== getUserInfo().data._id);\r\n    const getUser = async () => {\r\n        var url = Host + Endpoints.getUser\r\n        var data = {\r\n            userId: friendID\r\n        }\r\n        const result = await axios.post(url, data);\r\n        setUser(result.data.data)\r\n    }\r\n    useEffect(() => {\r\n        getUser();\r\n    }, [getUserInfo().data._id, conversations])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"conversation\">\r\n                <img src={user?.profile} alt={user?.name} className=\"conversationImage\" />\r\n                <span className=\"conversationName\">{user?.name}</span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './messages.css'\r\nexport default function Messages({ message, own }) {\r\n\r\n    return (\r\n        <>\r\n            <div className={own ? 'messages own' : 'messages'}>\r\n                <div className=\"messageTop\">\r\n                    <p className=\"messageText\">{message.text}</p>\r\n                </div>\r\n                <div className=\"messageBottom\">\r\n                    {new Date(message.createdAt).toDateString()}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport Topbar from '../../components/topbar/Topbar';\r\nimport './messanger.css';\r\nimport Conversations from '../../components/conversations/Conversations';\r\nimport Messages from '../../components/messages/Messages';\r\nimport ChatOnline from '../../components/chatonline/Chatonline';\r\nimport { Endpoints, getUserInfo, Host, SocketURL } from '../../helpers/comman_helper';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client'\r\nexport default function Messanger() {\r\n\r\n    const [loader, setLoader] = useState(false);\r\n    const [conversations, setConversations] = useState([]);\r\n    const [currentChat, setCurrentChat] = useState(null);\r\n    const [messages, setMessages] = useState(null);\r\n    const [newMessages, setNewMessages] = useState('');\r\n    const [arrivalMessage, setArrivalMessage] = useState(null);\r\n    const [error, setError] = useState([]);\r\n    const scrollRef = useRef();\r\n    const socket = useRef();\r\n\r\n    useEffect(() => {\r\n        socket.current = io(SocketURL);\r\n        socket.current.on(\"getMessage\", data => {\r\n            setArrivalMessage({\r\n                sender: data.senderId,\r\n                text: data.text,\r\n                createdAt: Date.now()\r\n            });\r\n        })\r\n    }, []);\r\n    useEffect(() => {\r\n        arrivalMessage &&\r\n            currentChat?.members.includes(arrivalMessage.sender) &&\r\n            setMessages((prev) => [...prev, arrivalMessage]);\r\n    }, [arrivalMessage, currentChat]);\r\n\r\n\r\n    const getConversations = async () => { // get all conversation of current User LEFT SIDE\r\n        setLoader(true);\r\n        try {\r\n            var url = Host + Endpoints.conversations + \"/\" + getUserInfo().data._id\r\n            const result = await axios.get(url);\r\n            setConversations(result.data.data);\r\n        } catch (err) {\r\n            console.log(\"err ===> \" + err)\r\n        }\r\n        setLoader(false);\r\n    }\r\n    const getMessages = async () => {\r\n        setLoader(true);\r\n        try {\r\n            var url = Host + Endpoints.messages + \"/\" + currentChat?._id\r\n            const result = await axios.get(url);\r\n            setMessages(result.data.data);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        setLoader(false);\r\n    }\r\n    const isValid = () => {\r\n        if (newMessages === null || newMessages === '') {\r\n            setError({ message: 'Please enter a message' });\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (isValid()) {\r\n            setError({});\r\n            var message = {\r\n                sender: getUserInfo().data._id,\r\n                text: newMessages,\r\n                conversationId: currentChat._id\r\n            }\r\n\r\n            const receiverId = currentChat.members !== undefined ? currentChat.members.find(member => member !== getUserInfo().data._id) : currentChat._id\r\n\r\n            socket.current.emit(\"sendMessage\", {\r\n                senderId: getUserInfo().data._id,\r\n                receiverId,\r\n                text: newMessages\r\n            });\r\n\r\n            try {\r\n                var url = Host + Endpoints.messages\r\n                const result = await axios.post(url, message);\r\n                setMessages([...messages, result.data.data]);\r\n                setNewMessages('');\r\n            } catch (err) {\r\n                console.log('There is an error!');\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        socket.current.emit(\"addUser\", getUserInfo().data._id);\r\n        socket.current.on(\"getUsers\", (users) => {\r\n            // console.log(\"users ===> \", users);\r\n        });\r\n    }, [getUserInfo().data]);\r\n\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [messages]);\r\n    useEffect(() => {\r\n        currentChat?._id && getMessages()\r\n    }, [currentChat]);\r\n\r\n    useEffect(() => {\r\n        getConversations();\r\n    }, [getUserInfo().data._id]);\r\n    return (\r\n        <>\r\n            <Topbar />\r\n            <div className=\"messanger\">\r\n                <div className=\"chatMenu\">\r\n                    <div className=\"chatMenuWrapper\">\r\n                        <input placeholder=\"Search for freinds...\" className=\"chatMenuInput\" />\r\n                        {/*Conversation of current user!*/}\r\n                        {\r\n                            conversations.map((c, i) => (\r\n                                <div key={i} onClick={() => setCurrentChat(c)}>\r\n                                    <Conversations conversations={c} />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"chatBox\">\r\n                    <div className=\"chatBoxWrapper\">\r\n                        {\r\n                            currentChat ? (\r\n                                <>\r\n                                    <div className=\"chatBoxTop\">\r\n                                        {\r\n                                            messages?.length > 0 ? (\r\n                                                messages.map((m, i) => (\r\n                                                    <div key={i} ref={scrollRef}>\r\n                                                        <Messages message={m} own={m.sender === getUserInfo().data._id} />\r\n                                                    </div>\r\n                                                ))\r\n                                            ) : (\r\n                                                <span className=\"initConversation\">Start Chatting!</span>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"chatBoxBottom\">\r\n                                        <input type=\"text\" name=\"chat\" placeholder=\"Write what's on your mind?\" className=\"chatMessageInput\" value={newMessages} onChange={(e) => setNewMessages(e.target.value)} />\r\n                                        <button className=\"chatSubmitButton\" onClick={handleSubmit}>Send</button>\r\n                                    </div>\r\n                                    <span className=\"text-danger\">{error.message}</span>\r\n                                </>\r\n                            ) : (\r\n                                <span className=\"noConversationText\">Choose conversation to start messaging!</span>\r\n                            )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"chatOnline\">\r\n                    {/*\r\n                        <div className=\"chatOnlineWrapper\">\r\n                        <ChatOnline setCurrentChat={setCurrentChat} currentChat={currentChat} />\r\n                    </div>\r\n                    */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}